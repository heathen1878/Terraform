{
    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "container_name": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "containers to create"
            }
        },
        "deploy_container": {
            "type": "string",
            "defaultValue": "No",
            "metadata": {
                "description": "Should container be created?"
            }
        },
        "deploy_iam": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Should IAM / RBAC be deployed? - if you must ensure the role and principal ids are valid."
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "Demo",
            "metadata": {
                "description": "Prod, Dev, Test, PoC, and Demo"
            }
        },
        "key": {
            "type": "string",
            "metadata": {
                "description": "The resource key; differentiates the name"
            }
        },
        "key_vault_ip_rules": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of Key / Values for IP address(es) and associated action"
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "The location of the resource group"
            }
        },
        "platform": {
            "type": "string",
            "metadata": {
                "description": "The associated platform"
            }
        },
        "resource_tags": {
            "type": "object",
            "defaultValue": {
                "key": "value"
            },
            "metadata": {
                "description": "Tags value pairs which get associated with the resource group"
            }
        },
        "rbac": {
            "type": "array",
            "defaultValue": [
                {
                    "role_id": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                    "principal_id": "00000000-0000-0000-0000-000000000000"
                }
            ],
            "metadata": {
                "description": "An object of resource group RBAC assignments"
            }
        },
        "secrets_officer": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "desciption": "the object Id of the secrets users group."
            }
        },
        "secrets_officer_type": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "desciption": "The principal type: User, Group or ServicePrinicpal"
            }
        },
        "secrets_user": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The GUID of the group to be assigned Secret User"
            }
        },
        "secrets_user_type": {
            "type": "string",
            "defaultValue": "Group",
            "metadata": {
                "desciption": "The principal type: User, Group or ServicePrinicpal"
            }
        },
        "storage_account_ip_rules": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "desciption": "Array of Key / Values for IP address(es) and associated action"
            }
        },
        "workload": {
            "type": "string",
            "metadata": {
                "description": "Which workload is this bootstrapping for?"
            }
        }
    },
    "variables": {
        "locations": {
            "australiacentral": {
                "short_code": "ac"
            },
            "australiacentral2": {
                "short_code": "ac2"
            },
            "australiasoutheast": {
                "short_code": "as"
            },
            "australiaeast": {
                "short_code": "ae"
            },
            "centralus": {
                "short_code": "cu"
            },
            "eastus": {
                "short_code": "eu"
            },
            "eastus2": {
                "short_code": "eu2"
            },
            "germanywestcentral": {
                "short_code": "gwc"
            },
            "northeurope": {
                "short_code": "ne2"
            },
            "southcentralus": {
                "short_code": "scu"
            },
            "uksouth": {
                "short_code": "us"
            },
            "ukwest": {
                "short_code": "uw"
            },
            "westcentralus": {
                "short_code": "wcu"
            },
            "westeurope": {
                "short_code": "we"
            },
            "westus": {
                "short_code": "wu"
            },
            "westus2": {
                "short_code": "wu2"
            },
            "westus3": {
                "short_code": "wu3"
            }
        },
        "subscription_unique": "[uniqueString(toLower(subscription().id), toLower(parameters('location')), toLower(parameters('environment')), toLower(parameters('key')))]",
        "globally_unique": "[uniqueString(toLower(subscription().tenantId), toLower(subscription().id), toLower(parameters('location')), toLower(parameters('environment')), toLower(parameters('key')))]",
        "resource_group_name": "[concat('rg-', toLower(parameters('workload')), '-', toLower(parameters('platform')), '-', parameters('environment'), '-', toLower(variables('locations')[parameters('location')].short_code), '-', variables('subscription_unique'))]",
        "storage_account_name": "[if(greater(length(concat('st', toLower(parameters('workload')), toLower(parameters('platform')), toLower(parameters('environment')), toLower(variables('locations')[parameters('location')].short_code), variables('globally_unique'))), 23), concat('st', toLower(parameters('workload')), toLower(parameters('platform')), parameters('environment'), toLower(variables('locations')[parameters('location')].short_code), substring(variables('globally_unique'), 0,4)), concat('st', toLower(parameters('workload')), toLower(parameters('platform')), toLower(parameters('environment')), toLower(variables('locations')[parameters('location')].short_code), variables('globally_unique')))]",
        "key_vault_name": "[if(greater(length(concat('kv', toLower(parameters('workload')), toLower(parameters('platform')), toLower(parameters('environment')), toLower(variables('locations')[parameters('location')].short_code), variables('globally_unique'))), 24), concat('kv', toLower(parameters('workload')), toLower(parameters('platform')), toLower(parameters('environment')), toLower(variables('locations')[parameters('location')].short_code), substring(variables('globally_unique'), 0,4)), concat('kv', toLower(parameters('workload')), toLower(parameters('platform')), toLower(parameters('environment')), toLower(variables('locations')[parameters('location')].short_code), variables('globally_unique')))]",
        "default_tags": "[parameters('resource_tags')]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2021-04-01",
            "name": "[variables('resource_group_name')]",
            "location": "[parameters('location')]",
            "tags": "[variables('default_tags')]"
        },
        {
            "condition": "[equals(parameters('deploy_iam'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[guid(parameters('rbac')[copyIndex('rbac')].principal_id, parameters('rbac')[copyIndex('rbac')].role_id, resourceId('Microsoft.Resources/resourceGroups', variables('resource_group_name')))]",
            "copy": {
                "name": "rbac",
                "count": "[length(parameters('rbac'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('resource_group_name'))]"
            ],
            "resourceGroup": "[variables('resource_group_name')]",
            "properties": {
                "mode": "incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2018-01-01-preview",
                            "name": "[guid(parameters('rbac')[copyIndex('rbac')].principal_id, parameters('rbac')[copyIndex('rbac')].role_id, resourceId('Microsoft.Resources/resourceGroups', variables('resource_group_name')))]",
                            "properties": {
                                "roleDefinitionId": "[ResourceId('Microsoft.Authorization/roleDefinitions', parameters('rbac')[copyIndex('rbac')].role_id)]",
                                "principalId": "[parameters('rbac')[copyIndex('rbac')].principal_id]",
                                "principalType": "Group"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "create_storage",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('resource_group_name'))]"
            ],
            "resourceGroup": "[variables('resource_group_name')]",
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "container_name": {
                        "value": "[parameters('container_name')]"
                    },
                    "deploy_container": {
                        "value": "[parameters('deploy_container')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "name": {
                        "value": "[variables('storage_account_name')]"
                    },
                    "resource_tags": {
                        "value": "[variables('default_tags')]"
                    },
                    "storage_account_ip_rules": {
                        "value": "[parameters('storage_account_ip_rules')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "account_sas_properties": {
                            "type": "object",
                            "defaultValue": {
                                "signedServices": "b",
                                "signedPermission": "r",
                                "signedResourceTypes": "co",
                                "signedStart": "[dateTimeAdd(utcNow('u'), '-PT1H')]",
                                "signedExpiry": "[dateTimeAdd(utcNow('u'), 'PT2H')]"
                            },
                            "metadata": {
                                "description": "used to obtain a SAS token for the storage account."
                            }
                        },
                        "allow_blob_public_access": {
                            "type": "bool",
                            "defaultValue": false,
                            "allowedValues": [
                                true,
                                false
                            ],
                            "metadata": {
                                "desciption": "Should the storage account be public - no by default but maybe useful for demoing stuff"
                            }
                        },
                        "container_name": {
                            "type": "array",
                            "defaultValue": [
                                "container1",
                                "container2"
                            ]
                        },
                        "container_public_access": {
                            "type": "string",
                            "defaultValue": "none",
                            "allowedValues": [
                                "none",
                                "Blob",
                                "Container"
                            ],
                            "metadata": {
                                "desciption": "Used in conjunction with allowBlobPublicAccess"
                            }
                        },
                        "deploy_container": {
                            "type": "string",
                            "defaultValue": "No",
                            "allowedValues": [
                                "Yes",
                                "No"
                            ],
                            "metadata": {
                                "description": "Determine whether a container or containers should be deployed"
                            }
                        },
                        "location": {
                            "type": "string",
                            "metadata": {
                                "description": "Location for all resources."
                            }
                        },
                        "min_tls_version" : {
                            "type": "string",
                            "defaultValue": "TLS1_2",
                            "metadata": {
                                "description": "minimum TLS version"
                            }
                        },
                        "name": {
                            "type": "string",
                            "metadata": {
                                "description": "Storage account name"
                            }
                        },
                        "resource_tags": {
                            "type": "object",
                            "defaultValue": {
                                "usage": "storage"
                            },
                            "metadata": {
                                "description": "Mandatory requirement to denote what the storage account is used for e.g. Compute diagnostics, NSG flow logs etc."
                            }
                        },
                        "storage_account_ip_rules": {
                            "type": "array",
                            "defaultValue": [],
                            "metadata": {
                                "desciption": "Array of Key / Values for IP address(es) and associated action"
                            }
                        }
                    },
                    "variables": {
                        "tags": "[parameters('resource_tags')]"
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Storage/storageAccounts",
                            "name": "[parameters('name')]",
                            "apiVersion": "2019-04-01",
                            "location": "[parameters('location')]",
                            "tags": "[variables('tags')]",
                            "kind": "StorageV2",
                            "sku": {
                                "name": "Standard_ZRS"
                            },
                            "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": "[parameters('allow_blob_public_access')]",
                                "containerPublicAccess": "[parameters('container_public_access')]",
                                "minimumTlsVersion": "[parameters('min_tls_version')]",
                                "networkAcls": {
                                    "resourceAccessRules": [],
                                    "bypass": "AzureServices",
                                    "virtualNetworkRules": [],
                                    "copy": [
                                        {
                                            "name": "ipRules",
                                            "count": "[length(parameters('storage_account_ip_rules'))]",
                                            "input": {
                                                "value": "[parameters('storage_account_ip_rules')[copyIndex('ipRules')]]",
                                                "action": "Allow"
                                            }
                                        }
                                    ],
                                    "defaultAction": "Deny"
                                }
                            }
                        },
                        {
                            "condition": "[equals(parameters('deploy_container'), 'Yes')]",
                            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                            "apiVersion": "2019-06-01",
                            "name": "[concat(parameters('name'), '/default/', toLower(parameters('container_name')[copyIndex('Containers')]))]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                            ],
                            "copy": {
                                "name": "Containers",
                                "count": "[length(parameters('container_name'))]"
                            },
                            "properties": {
                                "immutableStorageWithVersioning": {
                                    "enabled": false
                                },
                                "defaultEncryptionScope": "$account-encryption-key",
                                "denyEncryptionScopeOverride": false,
                                "publicAccess": "None"
                            }
                        },
                        {
                            "type": "Microsoft.Storage/storageAccounts/blobServices",
                            "apiVersion": "2023-01-01",
                            "name": "[concat(parameters('name'), '/default')]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                            ],
                            "sku": {
                                "name": "Standard_ZRS",
                                "tier": "Standard"
                            },
                            "properties": {
                                "cors": {
                                    "corsRules": []
                                },
                                "deleteRetentionPolicy": {
                                    "allowPermanentDelete": false,
                                    "enabled": true,
                                    "days": 30
                                },
                                "isVersioningEnabled": true,
                                "containerDeleteRetentionPolicy": {
                                    "enabled": true,
                                    "days": 30
                                }
                            }
                        }
                    ],
                    "outputs": {
                        "storage_account_name": {
                            "type": "string",
                            "value": "[parameters('name')]"
                        },
                        "storage_account_id": {
                            "type": "string",
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                        },
                        "artifact_location": {
                            "condition": "[equals(parameters('deploy_container'), 'Yes')]",
                            "type": "array",
                            "copy": {
                                "count": "[length(parameters('container_name'))]",
                                "input": "[concat('https://', parameters('name'), '.blob.core.windows.net/', toLower(parameters('container_name')[copyIndex()]))]"
                            }
                        },
                        "sas_token": {
                            "type": "string",
                            "value": "[listAccountSas(parameters('name'), '2021-04-01', parameters('account_sas_properties')).accountSasToken]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "create_key_vault",
            "dependsOn": [
                "create_storage"
            ],
            "resourceGroup": "[variables('resource_group_name')]",
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "key_vault_ip_rules": {
                        "value": "[parameters('key_vault_ip_rules')]"
                    },
                    "name": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "resource_tags": {
                        "value": "[variables('default_tags')]"
                    },
                    "secrets_officer": {
                        "value": "[parameters('secrets_officer')]"
                    },
                    "secrets_officer_type": {
                        "value": "[parameters('secrets_officer_type')]"
                    },
                    "secrets_user": {
                        "value": "[parameters('secrets_user')]"
                    },
                    "secrets_user_type": {
                        "value": "[parameters('secrets_user_type')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "location": {
                            "type": "string",
                            "metadata": {
                                "description": "The location of the resource; inherits the resource group configuration."
                            }
                        },
                        "sku": {
                            "type": "string",
                            "allowedValues": [
                                "Standard",
                                "Premium"
                            ],
                            "metadata": {
                                "description": "A Standard or Premium vault."
                            },
                            "defaultValue": "Standard"
                        },
                        "enable_soft_delete": {
                            "type": "bool",
                            "allowedValues": [
                                true,
                                false
                            ],
                            "defaultValue": true,
                            "metadata": {
                                "description": "Used to set soft delete functionality for the key vault - false is useful for test scenarios"
                            }
                        },
                        "enabled_for_deployment": {
                            "type": "bool",
                            "metadata": {
                                "desciption": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
                            },
                            "defaultValue": false,
                            "allowedValues": [
                                true,
                                false
                            ]
                        },
                        "enabled_for_template_deployment": {
                            "type": "bool",
                            "metadata": {
                                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
                            },
                            "defaultValue": false,
                            "allowedValues": [
                                true,
                                false
                            ]
                        },
                        "enabled_for_disk_encryption": {
                            "type": "bool",
                            "metadata": {
                                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
                            },
                            "defaultValue": false,
                            "allowedValues": [
                                true,
                                false
                            ]
                        },
                        "enable_diagnostic_logging": {
                            "type": "string",
                            "defaultValue": "No",
                            "allowedValues": [
                                "Yes",
                                "No"
                            ],
                            "metadata": {
                                "description": "Should diagnostic logging be enabled - if so requires log analytics workspace."
                            }
                        },
                        "log_analytics_workspace_id": {
                            "type": "string",
                            "defaultValue": "",
                            "metadata": {
                                "description": "The workspace, key vault will use for diagnostic logging"
                            }
                        },
                        "key_vault_ip_rules": {
                            "type": "array",
                            "defaultValue": [],
                            "metadata": {
                                "description": "Array of Key / Values for IP address(es) and associated action"
                            }
                        },
                        "name": {
                            "type": "string",
                            "metadata": {
                                "description": "Key vault name"
                            }
                        },
                        "resource_tags": {
                            "type": "object",
                            "defaultValue": {
                                "usage": "storage"
                            },
                            "metadata": {
                                "description": "Mandatory requirement to denote what the storage account is used for e.g. Compute diagnostics, NSG flow logs etc."
                            }
                        },
                        "secrets_officer": {
                            "type": "string",
                            "defaultValue": "",
                            "metadata": {
                                "desciption": "the object Id of the secrets users group."
                            }
                        },
                        "secrets_officer_type": {
                            "type": "string",
                            "defaultValue": "",
                            "metadata": {
                                "desciption": "The principal type: User, Group or ServicePrinicpal"
                            }
                        },
                        "secrets_user": {
                            "type": "string",
                            "defaultValue": "",
                            "metadata": {
                                "desciption": "the object Id of the secrets users group."
                            }
                        },
                        "secrets_user_type": {
                            "type": "string",
                            "defaultValue": "",
                            "metadata": {
                                "desciption": "The principal type: User, Group or ServicePrinicpal"
                            }
                        }
                    },
                    "variables": {
                        "tags": "[parameters('resource_tags')]",
                        "key_vault_id": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]",
                        "key_vault_secrets_user": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefintions/', '4633458b-17de-408a-b874-0445c86b69e6')]",
                        "key_vault_secrets_officer": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefintions/', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]"
                    },
                    "resources": [
                        {
                            "apiVersion": "2019-09-01",
                            "name": "[parameters('name')]",
                            "location": "[parameters('location')]",
                            "type": "Microsoft.KeyVault/vaults",
                            "tags": "[variables('tags')]",
                            "properties": {
                                "enabledForDeployment": "[parameters('enabled_for_deployment')]",
                                "enabledForTemplateDeployment": "[parameters('enabled_for_template_deployment')]",
                                "enabledForDiskEncryption": "[parameters('enabled_for_disk_encryption')]",
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": "[parameters('enable_soft_delete')]",
                                "enablePurgeProtection": "[if(parameters('enable_soft_delete'), bool('true'), json('null'))]",
                                "softDeleteRetentionInDays": 7,
                                "tenantId": "[subscription().tenantId]",
                                "sku": {
                                    "name": "[parameters('sku')]",
                                    "family": "A"
                                },
                                "networkAcls": {
                                    "defaultAction": "Deny",
                                    "bypass": "AzureServices",
                                    "copy": [
                                        {
                                            "name": "ipRules",
                                            "count": "[length(parameters('key_vault_ip_rules'))]",
                                            "input": {
                                                "value": "[parameters('key_vault_ip_rules')[copyIndex('ipRules')]]",
                                                "action": "Allow"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "condition": "[equals(parameters('enable_diagnostic_logging'), 'Yes')]",
                            "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
                            "name": "[concat(parameters('name'), '/Microsoft.Insights/service')]",
                            "apiVersion": "2016-09-01",
                            "location": "[parameters('location')]",
                            "dependsOn": [
                                "[variables('key_vault_id')]"
                            ],
                            "properties": {
                                "workspaceId": "[parameters('log_analytics_workspace_id')]",
                                "logs": [
                                    {
                                        "category": "AuditEvent",
                                        "enabled": true
                                    }
                                ],
                                "metrics": [
                                    {
                                        "category": "AllMetrics",
                                        "enabled": true
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
                            "apiVersion": "2020-04-01-preview",
                            "name": "[concat(parameters('name'), '/Microsoft.Authorization/', guid(uniqueString(concat(toUpper(parameters('secrets_user')), parameters('name')))))]",
                            "dependsOn": [
                                "[variables('key_vault_id')]"
                            ],
                            "properties": {
                                "roleDefinitionId": "[variables('key_vault_secrets_user')]",
                                "principalId": "[parameters('secrets_user')]",
                                "principalType": "[parameters('secrets_user_type')]"
                            }
                        },
                        {
                            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
                            "apiVersion": "2020-04-01-preview",
                            "name": "[concat(parameters('name'), '/Microsoft.Authorization/', guid(uniqueString(concat(toUpper(parameters('secrets_officer')), parameters('name')))))]",
                            "dependsOn": [
                                "[variables('key_vault_id')]"
                            ],
                            "properties": {
                                "roleDefinitionId": "[variables('key_vault_secrets_officer')]",
                                "principalId": "[parameters('secrets_officer')]",
                                "principalType": "[parameters('secrets_officer_type')]"
                            }
                        }
                    ],
                    "outputs": {
                        "key_vault_id": {
                            "type": "string",
                            "value": "[variables('key_vault_id')]"
                        },
                        "key_vault_name": {
                            "type": "string",
                            "value": "[parameters('name')]"
                        }
                    }
                }
            }
        }
    ]
}